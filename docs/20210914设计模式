1.1常用的创建型模式： 单例，工厂，抽象工厂，原型，builder
1.2不常用的创建型模式：没有，一共5种都挺常用

2.1一个比较简单的结构型设计模式：享元模式，各种池都是享元模式
2.2常用的结构型设计模式：adapter，decorator，proxy，facade，桥接模式；5个比较常用
    proxy和decorator实现上应该没什么区别，更多的是概念上的区别
    结构型的设计模式都挺类似
2.3不常用的结构型设计模式：组合模式；感觉这个就不用学了

3.1比较简单的行为型设计模式：memo（记录一下状态，restore恢复一下）
3.2比较专一的行为型模式：解释器模式
3.3比较难的行为型设计模式：visitor模式
3.4常用的行为型设计模式：strategy，template，observer，iterator，责任链，state，中介者（一共7个）
    state模式和strategy模式实现上没什么区别，更多是概念上的区别
    state模式就是状态机，这样说和责任链区别也不大
    中介者和结构型的facade作用上类似，应用对象和概念上有区别
3.5不常用的行为型设计模式：command
  命令模式：最没用的模式了吧？工作这么长时间没看到哪里用到，也没看到谁讲出新鲜的东西。掌握设计模式基本原则SOLID就可以代替这个模式了


参考：https://github.com/muthukumarse/books-1/blob/master/Design%20Patterns%2C%20Elements%20of%20Reusable%20Object-Oriented%20Software.pdf
